


type LidoTokenData @entity {
  id: ID!
  blockNumber: BigInt!
  blockTimestamp: BigInt!   
  totalPooledEtherAfter: BigInt! # 
  totalPooledEtherBefore: BigInt!
  totalSharesAfter: BigInt!  
  totalSharesBefore: BigInt!  
  tokenAmount: BigInt!
  balanceAfter: BigInt!
  from: Bytes!
  to: Bytes!  
  sender: Bytes!  
  totalRewards: BigInt
  totalRewardsWithFees: BigInt
  totalFee: BigInt
  shares2mint: BigInt
  sharesToInsuranceFund: BigInt
  sharesToOperators: BigInt
  sharesToTreasury:BigInt
  aprBeforeFees: BigDecimal
  apr: BigDecimal

}
type OracleCompleted @entity {
  id: ID!
  epochId: BigInt!
  beaconBalance: BigInt!
  beaconValidators: BigInt!
  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
}

type TotalReward @entity {
  id: ID!
  totalRewards: BigInt!
  totalRewardsWithFees: BigInt!

  totalFee: BigInt!
  nodeOperatorFees: [NodeOperatorFees!] @derivedFrom(field: "totalReward")
  insuranceFee: BigInt
  treasuryFee: BigInt
  dust: BigInt

  shares2mint: BigInt!

  sharesToInsuranceFund: BigInt!
  sharesToOperators: BigInt!
  sharesToTreasury: BigInt!
  nodeOperatorsShares: [NodeOperatorsShares!] @derivedFrom(field: "totalReward")

  totalPooledEtherBefore: BigInt!
  totalPooledEtherAfter: BigInt!
  totalSharesBefore: BigInt!
  totalSharesAfter: BigInt!

  postTotalPooledEther: BigInt
  preTotalPooledEther: BigInt
  timeElapsed: BigInt
  totalShares: BigInt

  aprBeforeFees: BigDecimal
  apr: BigDecimal

  block: BigInt!
  blockTime: BigInt!
  transactionIndex: BigInt!
  logIndex: BigInt!
  transactionLogIndex: BigInt!
}

type LidoSubmission @entity {
  id: ID!

  sender: Bytes!
  amount: BigInt!
  referral: Bytes!

  shares: BigInt!
  sharesBefore: BigInt!
  sharesAfter: BigInt!

  totalPooledEtherBefore: BigInt!
  totalPooledEtherAfter: BigInt!
  totalSharesBefore: BigInt!
  totalSharesAfter: BigInt!

  balanceAfter: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
  transactionLogIndex: BigInt!
}

type LidoTransfer @entity {
  id: ID!

  from: Bytes!
  to: Bytes!
  value: BigInt!

  shares: BigInt
  sharesBeforeDecrease: BigInt
  sharesAfterDecrease: BigInt
  sharesBeforeIncrease: BigInt
  sharesAfterIncrease: BigInt

  mintWithoutSubmission: Boolean!

  totalPooledEther: BigInt!
  totalShares: BigInt!

  balanceAfterDecrease: BigInt
  balanceAfterIncrease: BigInt

  block: BigInt!
  blockTime: BigInt!
  transactionHash: Bytes!
  transactionIndex: BigInt!
  logIndex: BigInt!
  transactionLogIndex: BigInt!
}



type LidoWithdrawal @entity {
  id: ID!

  sender: Bytes!
  tokenAmount: BigInt!
  sentFromBuffer: BigInt!
  pubkeyHash: Bytes!
  etherAmount: BigInt!
}

type NodeOperatorFees @entity {
  id: ID!
  totalReward: TotalReward!

  address: Bytes!
  fee: BigInt!
}


type Totals @entity {
  id: ID!

  totalPooledEther: BigInt!
  totalShares: BigInt!
}

type Shares @entity {
  id: ID!

  shares: BigInt!
}

type Holder @entity {
  id: ID!

  address: Bytes!
}


#"""
#NodeOperatorsRegistry
#"""

type NodeOperatorSigningKey @entity {
  id: ID!

  operatorId: BigInt!
  pubkey: Bytes!
  removed: Boolean!
}

type NodeOperator @entity {
  id: ID!

  name: String!
  rewardAddress: Bytes!
  stakingLimit: BigInt!
  active: Boolean!
  totalStoppedValidators: BigInt
}

type NodeOperatorsShares @entity {
  id: ID!
  totalReward: TotalReward!

  address: Bytes!
  shares: BigInt!
}